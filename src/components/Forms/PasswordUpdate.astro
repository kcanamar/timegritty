---
---
<div class="setting-password-ui">
  <div class="setting-description">
    <h3>Update account password</h3>
    <p>Change your account password. <strong><em>We recommend changing this at least once a year.</em></strong></p>
  </div>
  <form action="/api/user/password" method="POST" id="update-password" class="setting-form">
    <label for="password">Current Password</label>
    <div class="password-container">
      <input type="password" name="currentPassword" id="current-password" autocomplete="current-password" required maxlength="32">
      <button type="button" class="toggle-password" id="toggleCurrentPassword">show</button>
    </div>
    <div id="name-error" class="modal-error-msg">
      <strong><em>That password isn't correct.</em></strong>
    </div>
    <label for="password">New Password</label>
    <div class="password-container">
      <input type="password" name="newPassword" id="new-password" autocomplete="new-password" required maxlength="32">
      <button type="button" class="toggle-password" id="toggleNewPassword">show</button>
    </div>
    <input type="submit" id="password-submit" class="confirm-modal-btn" value="Confirm" >
  </form>
</div>
<script >
import { GritError } from "../../utils/error"

const currentPasswordInput = document.querySelector("#current-password") 
if (!currentPasswordInput) throw new GritError("Current password input cannot be found", "UI_FAILURE")
const newPasswordInput = document.querySelector("#new-password") 
if (!newPasswordInput) throw new GritError("New password input cannot be found", "UI_FAILURE")
const toggleCurrentPassword = document.querySelector("#toggleCurrentPassword")
if (!toggleCurrentPassword) throw new GritError("Cannot find toggle current password", "UI_FAILURE")
const toggleNewPassword = document.querySelector("#toggleNewPassword")
if (!toggleNewPassword) throw new GritError("Cannot find toggle new password", "UI_FAILURE")

toggleCurrentPassword.addEventListener('click', function() {
  if ((currentPasswordInput as HTMLInputElement).type === 'password') {
    (currentPasswordInput as HTMLInputElement).type = 'text';
    toggleCurrentPassword.textContent = 'hide'
  } else {
    (currentPasswordInput as HTMLInputElement).type = 'password';
    toggleCurrentPassword.textContent = 'show'
  }
})

toggleNewPassword.addEventListener('click', function() {
  if ((newPasswordInput as HTMLInputElement).type === 'password') {
    (newPasswordInput as HTMLInputElement).type = 'text';
    toggleNewPassword.textContent = 'hide'
  } else {
    (newPasswordInput as HTMLInputElement).type = 'password';
    toggleNewPassword.textContent = 'show'
  }
})
</script>

<style is:global>

.darkmode .setting-form input[type='password'] {
  background-color: transparent;
  padding: .3rem;
  border-radius: var(--radius-small);
}

#current-password, #new-password {
  padding: 0.4rem;
}

#password-submit {
  padding: 0.3rem;
  border: none;
  color: var(--neutral-600);
}

#password-submit:valid:hover,
#password-submit:valid:focus {
  cursor: pointer;
  background-color: var(--success-700);
  color: var(--neutral-100);
}

.setting-password-ui strong em {
  color: var(--info-500);
}

.setting-password-ui .password-container {
  display: flex;
  flex-direction: row;
  flex-grow: 10;
}

.setting-password-ui .password-container input{
  width: 100%;
}

.setting-password-ui .password-container .toggle-password {
  margin-left: -3rem;
  padding: 0;
  z-index: 1;
  border: none;
}



@media (min-width: 48em) {
  .setting-password-ui {
    display: grid;
    grid-template-columns: 1fr 1fr;
    align-items: center;
  }
  .setting-description {

  }
  .setting-form {

  }
}
</style>